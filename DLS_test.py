import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

def stret_exp(x,G,B):
    x = np.array(x)
    return np.exp(-G*(x**B))**2

list_of_stuff = [2.000000000E+000,8.975476000E+006,4.000000000E+000,8.968502000E+006,6.000000000E+000,8.965092000E+006,8.000000000E+000,8.946617000E+006,1.000000000E+001,8.936694000E+006,1.200000000E+001,8.931306000E+006,1.400000000E+001,8.921992000E+006,1.600000000E+001,8.915810000E+006,1.800000000E+001,8.911802000E+006,2.000000000E+001,8.894651000E+006,2.200000000E+001,8.888885000E+006,2.400000000E+001,8.882178000E+006,2.600000000E+001,8.868691000E+006,2.800000000E+001,8.869203000E+006,3.000000000E+001,8.864563000E+006,3.200000000E+001,8.854181000E+006,3.400000000E+001,8.847842000E+006,3.600000000E+001,8.853251000E+006,3.800000000E+001,8.835106000E+006,4.000000000E+001,8.830217000E+006,4.200000000E+001,8.819297000E+006,4.400000000E+001,8.815709000E+006,4.800000000E+001,8.806430000E+006,5.000000000E+001,8.787864000E+006,5.200000000E+001,8.785915000E+006,5.600000000E+001,8.765680000E+006,5.800000000E+001,8.764257000E+006,6.200000000E+001,8.753334000E+006,6.600000000E+001,8.741093000E+006,6.800000000E+001,8.728853000E+006,7.200000000E+001,8.725988000E+006,7.600000000E+001,8.712009000E+006,8.000000000E+001,8.695591000E+006,8.400000000E+001,8.689879000E+006,9.000000000E+001,8.674966000E+006,9.400000000E+001,8.648438000E+006,1.000000000E+002,8.641233000E+006,1.060000000E+002,8.623740000E+006,1.120000000E+002,8.605950000E+006,1.180000000E+002,8.597416000E+006,1.240000000E+002,8.574458000E+006,1.300000000E+002,8.564542000E+006,1.380000000E+002,8.537292000E+006,1.460000000E+002,8.515601000E+006,1.540000000E+002,8.496491000E+006,1.620000000E+002,8.477776000E+006,1.700000000E+002,8.457567000E+006,1.800000000E+002,8.436250000E+006,1.900000000E+002,8.412146000E+006,2.000000000E+002,8.391917000E+006,2.120000000E+002,8.361702000E+006,2.220000000E+002,8.337177000E+006,2.360000000E+002,8.315140500E+006,2.480000000E+002,8.284789000E+006,2.620000000E+002,8.264263000E+006,2.760000000E+002,8.230235000E+006,2.920000000E+002,8.213673500E+006,3.080000000E+002,8.175887500E+006,3.240000000E+002,8.146082000E+006,3.420000000E+002,8.117471000E+006,3.600000000E+002,8.084609000E+006,3.800000000E+002,8.064824500E+006,4.020000000E+002,8.022180500E+006,4.240000000E+002,7.997032500E+006,4.480000000E+002,7.961567000E+006,4.720000000E+002,7.929532500E+006,4.980000000E+002,7.899716000E+006,5.260000000E+002,7.863057000E+006,5.540000000E+002,7.840556000E+006,5.840000000E+002,7.810352000E+006,6.160000000E+002,7.770401000E+006,6.500000000E+002,7.741606000E+006,6.860000000E+002,7.709059000E+006,7.240000000E+002,7.677835000E+006,7.640000000E+002,7.648965500E+006,8.060000000E+002,7.616947500E+006,8.500000000E+002,7.594098500E+006,9.000000000E+002,7.564438500E+006,9.500000000E+002,7.537452500E+006,1.000000000E+003,7.512277500E+006,1.050000000E+003,7.489543000E+006,1.100000000E+003,7.468243500E+006,1.150000000E+003,7.449100000E+006,1.250000000E+003,7.415219500E+006,1.300000000E+003,7.399306000E+006,1.400000000E+003,7.374584000E+006,1.450000000E+003,7.363784000E+006,1.550000000E+003,7.343916500E+006,1.600000000E+003,7.334813500E+006,1.700000000E+003,7.318339500E+006,1.800000000E+003,7.304913000E+006,1.900000000E+003,7.292600000E+006,2.000000000E+003,7.283560000E+006,2.100000000E+003,7.276041000E+006,2.250000000E+003,7.266090000E+006,2.350000000E+003,7.261519500E+006,2.500000000E+003,7.254803500E+006,2.600000000E+003,7.250949000E+006,2.750000000E+003,7.249241500E+006,2.900000000E+003,7.247043000E+006,3.100000000E+003,7.246456500E+006,3.250000000E+003,7.245250500E+006,3.400000000E+003,7.245275500E+006,3.600000000E+003,7.242991500E+006,3.800000000E+003,7.241059000E+006,4.000000000E+003,7.238791000E+006,4.250000000E+003,7.238977500E+006,4.450000000E+003,7.239884000E+006,4.700000000E+003,7.239779500E+006,5.000000000E+003,7.237749000E+006,5.250000000E+003,7.236047000E+006,5.550000000E+003,7.233210500E+006,5.850000000E+003,7.234033500E+006,6.150000000E+003,7.233630000E+006,6.500000000E+003,7.232021500E+006,6.850000000E+003,7.232315500E+006,7.250000000E+003,7.231773000E+006,7.650000000E+003,7.233547500E+006,8.050000000E+003,7.236646500E+006,8.500000000E+003,7.240478500E+006,9.000000000E+003,7.238984000E+006,9.450000000E+003,7.236335500E+006,1.000000000E+004,7.237827500E+006,1.055000000E+004,7.243865500E+006,1.110000000E+004,7.243041500E+006,1.175000000E+004,7.238753000E+006,1.240000000E+004,7.232429500E+006,1.305000000E+004,7.236462000E+006,1.380000000E+004,7.238154500E+006,1.455000000E+004,7.240618500E+006,1.535000000E+004,7.229954000E+006,1.620000000E+004,7.231337000E+006,1.705000000E+004,7.233332000E+006,1.800000000E+004,7.233314500E+006,1.900000000E+004,7.236987000E+006,2.005000000E+004,7.239973000E+006,2.115000000E+004,7.236021000E+006,2.230000000E+004,7.238712500E+006,2.355000000E+004,7.239402500E+006,2.485000000E+004,7.235739500E+006,2.620000000E+004,7.235648500E+006,2.765000000E+004,7.247885000E+006,2.915000000E+004,7.235379000E+006,3.080000000E+004,7.238304500E+006,3.245000000E+004,7.236398000E+006,3.425000000E+004,7.233106500E+006,3.615000000E+004,7.239499500E+006,3.815000000E+004,7.237164000E+006,4.025000000E+004,7.238882500E+006,4.245000000E+004,7.241924500E+006,4.480000000E+004,7.241677500E+006,4.725000000E+004,7.236029500E+006,4.985000000E+004,7.239513000E+006,5.260000000E+004,7.239968000E+006,5.550000000E+004,7.242526000E+006,5.855000000E+004,7.235194500E+006,6.175000000E+004,7.241234500E+006,6.515000000E+004,7.236737000E+006,6.875000000E+004,7.238641000E+006,7.250000000E+004,7.238127500E+006,7.650000000E+004,7.246817000E+006,8.070000000E+004,7.235525000E+006,8.515000000E+004,7.239770000E+006,8.985000000E+004,7.235372500E+006,9.480000000E+004,7.234108500E+006,1.000000000E+005,7.237302500E+006,3.998500000E+005,7.236260500E+006,3.999000000E+005,7.235832500E+006,3.999500000E+005,7.235970000E+006,4.000000000E+005,7.235302500E+006]

x_list = list_of_stuff[::2]
y_list = list_of_stuff[1:][::2]

calc_baseline = np.average(y_list[:-1][-5:])
measured_baseline = y_list[-1]
y_list1 = np.array(y_list) - calc_baseline

print measured_baseline
print calc_baseline

y_list2 = y_list1/max(y_list1)

y_list3 = y_list2[:-60]
x_list3 = x_list[:-60]

y_list4 = np.array(y_list3)**1

plt.figure(figsize=(12,15))

plt.plot(x_list3, y_list3, 'bo', markersize = 5)
lis = [0.002, 0.93]
popt,pcov = curve_fit(stret_exp, x_list3, y_list4, lis, maxfev = 445)
print popt

xs = np.linspace(2,10e5, 200000) # Must be above 100000
plt.plot(xs, stret_exp(xs, *popt), 'g--', linewidth = 3)
#plt.plot([min(x_list), max(x_list)], 2*[calc_baseline], 'r--')

plt.ylim(1e-4, 2)
plt.xlim(1,10e6)
plt.yscale('log')
plt.xscale('log')


#plt.figure()
li = [0.00151632048720815	,     0.9284863365182976]
plt.plot(xs, stret_exp(xs, *li), 'r-')
plt.yscale('log')
plt.xscale('log')
plt.ylim(1e-4, 2)
